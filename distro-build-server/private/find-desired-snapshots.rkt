#lang racket/base
(require racket/date
         racket/set)

(provide find-desired-week-and-month-snapshots)

(define (find-desired-week-and-month-snapshots week-count snapshots now)
  (define snapshots+seconds
    (for/list ([snapshot-name (in-list snapshots)])
      (define m (regexp-match #rx"^([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])-"
                              snapshot-name))
      (unless m
        (error 'manage-snapshots.rkt "couldn't parse snapshot date: ~s"
               snapshot-name))
      (define year (string->number (list-ref m 1)))
      (define month (string->number (list-ref m 2)))
      (define day (string->number (list-ref m 3)))
      (list snapshot-name (find-seconds 0 0 0 day month year))))
  (set! snapshots+seconds (sort snapshots+seconds < #:key cadr))
  (define desired-snapshots (mutable-set))
  (define (try-keep start-delta-days end-delta-days)
    (define start-seconds (- now (* start-delta-days 24 60 60)))
    (define end-seconds (- now (* end-delta-days 24 60 60)))
    (define keeper
      (for/or ([snapshot+seconds (in-list snapshots+seconds)])
        (define snapshot (list-ref snapshot+seconds 0))
        (define seconds (list-ref snapshot+seconds 1))
        (and (<= end-seconds seconds)
             (< seconds start-seconds)
             snapshot+seconds)))
    (when keeper (set-add! desired-snapshots keeper)))
  
  ;; keep one per day for a week or else we won't keep
  ;; anything longer than a week as they'll get deleted
  ;; before they start getting saved by the week loop
  (for ([i (in-range 7)])
    (try-keep i (+ i 1)))
  
  ;; week loop
  (for ([i (in-range week-count)])
    (try-keep (* i 7) (* (+ i 1) 7)))
  
  (define date-candidates
    (map car (sort (set->list desired-snapshots) > #:key cadr)))
  (cond
    [(and (null? date-candidates)
          (pair? snapshots))
     (list (car (car snapshots+seconds)))]
    [else
     date-candidates]))

(module+ test
  (require rackunit racket/format)
  (define dec-25-2016 (find-seconds 0 0 0 25 12 2016))
  (define (try dates #:today [today dec-25-2016])
    (define ans
      (find-desired-week-and-month-snapshots
       4
       (for/list ([date (in-list dates)])
         (~a (list-ref date 0)
             (~r #:min-width 2 #:pad-string "0" (list-ref date 1))
             (~r #:min-width 2 #:pad-string "0" (list-ref date 2))
             "-"))
       today))
    (for/list ([ele (in-list ans)])
      (list (string->number (substring ele 0 4))
            (string->number (substring ele 4 6))
            (string->number (substring ele 6 8)))))
  (check-equal? (try '()) '())
  (check-equal? (try '((2016 12 24)))
                '((2016 12 24)))
  (check-equal? (try '((2016 12 24)
                       (2016 12 23)
                       (2016 12 22)
                       (2016 12 21)))
                '((2016 12 24)
                  (2016 12 23)
                  (2016 12 22)
                  (2016 12 21)))
  (check-equal? (try '((2016 12 24)
                       (2016 12 23)
                       (2016 12 22)
                       (2016 12 21)
                       (2016 12 20)))
                '((2016 12 24)
                  (2016 12 23)
                  (2016 12 22)
                  (2016 12 21)
                  (2016 12 20)))
  (check-equal? (try '((2016 12 24)
                       (2016 12 23)
                       (2016 12 22)
                       (2016 12 21)
                       (2016 12 20)
                       (2016 12 19)
                       (2016 12 18)
                       (2016 12 17)
                       (2016 12 16)
                       (2016 12 15)
                       (2016 12 14)
                       (2016 12 13)
                       (2016 12 12)
                       (2016 12 11)
                       (2016 12 10)
                       (2016 12 9)
                       (2016 12 8)
                       (2016 12 7)
                       (2016 12 6)
                       (2016 12 5)
                       (2016 12 4)
                       (2016 12 3)
                       (2016 12 2)
                       (2016 12 1)))
                '((2016 12 24)
                  (2016 12 23)
                  (2016 12 22)
                  (2016 12 21)
                  (2016 12 20)
                  (2016 12 19)
                  (2016 12 18)
                  (2016 12 11)
                  (2016 12 4)
                  (2016 12 1)))
  (check-equal? (try '((2016 12 24)
                       (2016 12 23)
                       (2016 12 22)
                       (2016 12 21)
                       (2016 12 20)
                       (2016 12 19)
                       (2016 12 18)
                       (2016 12 17)
                       (2016 12 10)
                       (2016 12 3)))
                '((2016 12 24)
                  (2016 12 23)
                  (2016 12 22)
                  (2016 12 21)
                  (2016 12 20)
                  (2016 12 19)
                  (2016 12 18)
                  (2016 12 17)
                  (2016 12 10)
                  (2016 12 3)))
  (check-equal? (try '((2016 12 23)
                       (2016 12 22)
                       (2016 12 21)
                       (2016 12 20)
                       (2016 12 19)
                       (2016 12 18)
                       (2016 12 17)
                       (2016 12 16)
                       (2016 12 9)
                       (2016 12 2)))
                '((2016 12 23)
                  (2016 12 22)
                  (2016 12 21)
                  (2016 12 20)
                  (2016 12 19)
                  (2016 12 18)
                  (2016 12 16)
                  (2016 12 9)
                  (2016 12 2)))
  (check-equal? (try '((2016 12 1)))
                '((2016 12 1)))
  (check-equal? (try '((2016 11 1)
                       (2016 10 1)))
                '((2016 10 1)))

  (check-equal?
   (try '((2017 02 15)
          (2017 02 14)
          (2017 02 13)
          (2017 02 12)
          (2017 02 11)
          (2017 02 10)
          (2017 02 09)
          (2017 02 08)
          (2017 02 07))
        #:today (find-seconds 1 0 0 15 2 2017))
   '((2017 02 15)
     (2017 02 14)
     (2017 02 13)
     (2017 02 12)
     (2017 02 11)
     (2017 02 10)
     (2017 02 09)
     (2017 02 07))))
